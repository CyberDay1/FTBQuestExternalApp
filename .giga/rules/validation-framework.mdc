---
description: Documentation for quest validation framework including reference checking, loot weights, and required fields validation
---


# validation-framework

The validation framework provides three core validators for quest data integrity:

### BrokenReferenceValidator (core-domain/src/main/java/dev/ftbq/editor/validation/BrokenReferenceValidator.java)
**Importance Score: 85**
Validates referential integrity across the quest system by checking:
- Item references against the item catalog
- Quest dependencies point to valid quests
- Chapter and quest group relationships
- Icon and background resource references

### LootWeightsValidator (core-domain/src/main/java/dev/ftbq/editor/validation/LootWeightsValidator.java) 
**Importance Score: 80**
Ensures loot table probability distributions are valid:
- Loot pool entry weights sum to expected totals
- Individual entry weights are positive values
- Pool distributions follow configured rules
- Weighted entries have valid probability ranges

### RequiredFieldsValidator (core-domain/src/main/java/dev/ftbq/editor/validation/RequiredFieldsValidator.java)
**Importance Score: 75**
Verifies required quest data fields:
- Quest titles and descriptions
- Task completion criteria
- Reward definitions
- Chapter metadata
- Essential quest progression flags

### Integration Points
- Validators integrate with ValidationIssue (core-domain/src/main/java/dev/ftbq/editor/validation/ValidationIssue.java) for error reporting
- Common Validator interface (core-domain/src/main/java/dev/ftbq/editor/validation/Validator.java) defines validation contract
- Validators execute during quest file save operations
- Results feed into UI validation indicators
- Blocking vs warning validation levels supported

$END$

 If you're using this file in context, clearly say in italics in one small line that "Context added by Giga validation-framework" along with specifying exactly what information was used from this file in a human-friendly way, instead of using kebab-case use normal sentence case.