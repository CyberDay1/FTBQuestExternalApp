using FTBQuests.Core.Model;using FTBQuests.Assets;// <copyright file="Quest.cs" company="CyberDay1">// Copyright (c) CyberDay1. All rights reserved.// </copyright>using System.Collections.Generic;namespace FTBQuests.Codecs.Model;public class Quest : IExtraAware{    private readonly List<string> propertyOrder = new();    private readonly List<ITask> tasks = new();    private readonly List<IReward> rewards = new();    private readonly List<long> dependencies = new();    public long Id { get; set; }    public string Title { get; set; } = string.Empty;    public string? Subtitle { get; set; }    public Identifier? IconId { get; set; }    public IReadOnlyList<ITask> Tasks => tasks;    public IReadOnlyList<IReward> Rewards => rewards;    public IReadOnlyList<long> Dependencies => dependencies;    public int PositionX { get; set; }    public int PositionY { get; set; }    public int Page { get; set; }    public PropertyBag Extra { get; } = new();    internal IList<string> PropertyOrder => propertyOrder;    public void AddTask(ITask task)    {        tasks.Add(task);    }    public void AddTasks(IEnumerable<ITask> tasks)    {        this.tasks.AddRange(tasks);    }    public void ClearTasks()    {        tasks.Clear();    }    public void AddReward(IReward reward)    {        rewards.Add(reward);    }    public void AddRewards(IEnumerable<IReward> rewards)    {        this.rewards.AddRange(rewards);    }    public void ClearRewards()    {        rewards.Clear();    }    public void AddDependency(long dependency)    {        dependencies.Add(dependency);    }    public void AddDependencies(IEnumerable<long> dependencies)    {        this.dependencies.AddRange(dependencies);    }    public void ClearDependencies()    {        dependencies.Clear();    }    internal void SetPropertyOrder(IEnumerable<string> order)    {        propertyOrder.Clear();        propertyOrder.AddRange(order);    }}
