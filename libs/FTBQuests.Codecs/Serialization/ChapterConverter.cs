// <copyright file="ChapterConverter.cs" company="CyberDay1">// Copyright (c) CyberDay1. All rights reserved.// </copyright>using System.Collections.Generic;using System.Globalization;using System.Linq;using FTBQuests.Codecs.Model;using Newtonsoft.Json;using Newtonsoft.Json.Linq;
using FTBQuests.Core.Model;

using FTBQuests.Assets;

namespace FTBQuests.Codecs.Serialization;
public class ChapterConverter : JsonConverter<Chapter>{    private static readonly string[] DefaultPropertyOrder =    {        "id",        "title",        "description",        "icon",        "quests",    };    public override Chapter? ReadJson(JsonReader reader, Type objectType, Chapter? existingValue, bool hasExistingValue, JsonSerializer serializer)    {        if (reader.TokenType == JsonToken.Null)        {            return null;        }        var jobject = JObject.Load(reader);        var chapter = existingValue ?? new Chapter();        var properties = jobject.Properties().ToList();        chapter.SetPropertyOrder(properties.Select(p => p.Name));        chapter.ClearQuests();        chapter.Extra.Extra.Clear();        chapter.Id = 0;        chapter.Description = null;        chapter.IconId = null;        chapter.Title = string.Empty;        foreach (var property in properties)        {            switch (property.Name)            {                case "id":                    chapter.Id = ConvertToLong(property.Value, serializer);                    break;                case "title":                    chapter.Title = property.Value.Type == JTokenType.Null                        ? string.Empty                        : property.Value.Value<string>() ?? string.Empty;                    break;                case "description":                    chapter.Description = property.Value.Type == JTokenType.Null                        ? null                        : property.Value.Value<string>();                    break;                case "icon":                case "iconId":                case "icon_id":                    if (property.Value.Type == JTokenType.Null)                    {                        chapter.IconId = null;                    }                    else                    {                        var iconValue = property.Value.Value<string>();                        chapter.IconId = iconValue is null ? null : new Identifier(iconValue);                    }                    break;                case "quests":                    if (property.Value.Type == JTokenType.Null)                    {                        chapter.ClearQuests();                    }                    else                    {                        var quests = property.Value.ToObject<List<Quest>>(serializer) ?? new List<Quest>();                        chapter.ClearQuests();                        chapter.AddQuests(quests);                    }                    break;                default:                    chapter.Extra.Add(property.Name, property.Value.DeepClone());                    break;            }        }        return chapter;    }    public override void WriteJson(JsonWriter writer, Chapter? value, JsonSerializer serializer)    {        if (value is null)        {            writer.WriteNull();            return;        }        var knownTokens = new Dictionary<string, JToken>(StringComparer.Ordinal)        {            ["id"] = new JValue(value.Id),        };        if (!string.IsNullOrEmpty(value.Title))        {            knownTokens["title"] = new JValue(value.Title);        }        if (value.Description is not null)        {            knownTokens["description"] = new JValue(value.Description);        }        if (value.IconId is Identifier iconId)        {            knownTokens["icon"] = new JValue(iconId.Value);        }        if (value.Quests is not null)        {            knownTokens["quests"] = JArray.FromObject(value.Quests, serializer);        }        var orderedKeys = value.PropertyOrder.Count > 0 ? value.PropertyOrder : DefaultPropertyOrder;        var written = new HashSet<string>(StringComparer.Ordinal);        var jobject = new JObject();        foreach (var key in orderedKeys)        {            if (written.Contains(key))            {                continue;            }            if (knownTokens.TryGetValue(key, out var knownToken))            {                jobject.Add(key, knownToken);                written.Add(key);                continue;            }            if (value.Extra.Extra.TryGetValue(key, out var extraToken))            {                jobject.Add(key, extraToken.DeepClone());                written.Add(key);            }        }        foreach (var key in DefaultPropertyOrder)        {            if (written.Contains(key))            {                continue;            }            if (knownTokens.TryGetValue(key, out var knownToken))            {                jobject.Add(key, knownToken);                written.Add(key);            }        }        foreach (var kvp in value.Extra.Extra)        {            if (written.Contains(kvp.Key))            {                continue;            }            jobject.Add(kvp.Key, kvp.Value.DeepClone());            written.Add(kvp.Key);        }        jobject.WriteTo(writer);    }    private static long ConvertToLong(JToken token, JsonSerializer serializer)    {        return token.Type switch        {            JTokenType.Null => 0,            JTokenType.Integer => token.Value<long>(),            JTokenType.Float => System.Convert.ToInt64(token.Value<double>()),            JTokenType.String => TryParseString(token.Value<string>()),            _ => token.ToObject<long>(serializer),        };        static long TryParseString(string? value)        {            if (string.IsNullOrWhiteSpace(value))            {                return 0;            }            return long.TryParse(value, NumberStyles.Integer, CultureInfo.InvariantCulture, out var parsed) ? parsed : 0;        }    }}
