using FTBQuests.Validation;using FTBQuests.Assets;// <copyright file="LootTableGroupBuilder.cs" company="CyberDay1">// Copyright (c) CyberDay1. All rights reserved.// </copyright>using System;using System.Collections.Generic;using System.IO;using System.Linq;using System.Text;using Newtonsoft.Json;namespace FTBQuests.Loot;/// <summary>/// Provides helpers to construct and serialize <see cref="LootTableGroup"/> instances./// </summary>public sealed class LootTableGroupBuilder{    private readonly LootTableGroup group;    /// <summary>    /// Initializes a new instance of the <see cref="LootTableGroupBuilder"/> class.    /// </summary>    /// <param name="name">The group name.</param>    public LootTableGroupBuilder(string name)    {        group = new LootTableGroup(name);    }    /// <summary>    /// Gets the mutable group being built.    /// </summary>    public LootTableGroup Group => group;    /// <summary>    /// Adds a table to the group.    /// </summary>    /// <param name="tableName">The table name.</param>    /// <returns>The current builder.</returns>    public LootTableGroupBuilder AddTable(string tableName)    {        ArgumentException.ThrowIfNullOrEmpty(tableName);        if (!group.TableNames.Contains(tableName, StringComparer.OrdinalIgnoreCase))        {            group.TableNames.Add(tableName);        }        return this;    }    /// <summary>    /// Clears the current table membership.    /// </summary>    /// <returns>The builder.</returns>    public LootTableGroupBuilder ClearTables()    {        group.TableNames.Clear();        return this;    }    /// <summary>    /// Builds a new immutable group instance.    /// </summary>    /// <returns>The built <see cref="LootTableGroup"/>.</returns>    public LootTableGroup Build()    {        var clone = new LootTableGroup(group.Name);        foreach (string table in group.TableNames)        {            clone.TableNames.Add(table);        }        return clone;    }    /// <summary>    /// Saves the group to the quest configuration directory.    /// </summary>    /// <param name="rootDirectory">The quest pack root.</param>    /// <returns>The saved file path.</returns>    public string Save(string rootDirectory)    {        ArgumentException.ThrowIfNullOrEmpty(rootDirectory);        LootTableGroup builtGroup = Build();        var dto = new LootTableGroupDto        {            Name = builtGroup.Name,            Tables = builtGroup.TableNames.ToList(),        };        string configDirectory = Path.Combine(rootDirectory, "config", "ftbquests", "loot_tables", "groups");        Directory.CreateDirectory(configDirectory);        string targetPath = Path.Combine(configDirectory, builtGroup.Name + ".json");        string json = JsonConvert.SerializeObject(dto, Formatting.Indented);        File.WriteAllText(targetPath, json, Encoding.UTF8);        return targetPath;    }    /// <summary>    /// Loads a group from a previously serialized JSON file.    /// </summary>    /// <param name="filePath">The JSON file path.</param>    /// <returns>The deserialized group.</returns>    public static LootTableGroup Load(string filePath)    {        ArgumentException.ThrowIfNullOrEmpty(filePath);        string json = File.ReadAllText(filePath, Encoding.UTF8);        var dto = JsonConvert.DeserializeObject<LootTableGroupDto>(json)            ?? throw new InvalidDataException("Loot group JSON was empty.");        var group = new LootTableGroup(dto.Name);        if (dto.Tables is not null)        {            foreach (string table in dto.Tables)            {                if (!string.IsNullOrWhiteSpace(table) && !group.TableNames.Contains(table, StringComparer.OrdinalIgnoreCase))                {                    group.TableNames.Add(table);                }            }        }        return group;    }    private sealed class LootTableGroupDto    {        public string Name { get; set; } = string.Empty;        public List<string> Tables { get; set; } = new();    }}